{"version":3,"sources":["surfaces.js"],"names":[],"mappings":"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","file":"surfaces.js","sourcesContent":["(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('lodash'), require('two-rotations')) :\n  typeof define === 'function' && define.amd ? define(['lodash', 'two-rotations'], factory) :\n  global.Surface = factory(global._, global.twoRotations)\n}(this, function (_, twoRotations) { 'use strict';\n\n  // Utilities to map a value in a given scale to the equivalent\n  // value in another scale. Similar to d3.scale.linear.\n\n  function percentFromVal(scale, val) {\n    return 1 - (scale[1] - val) / (scale[1] - scale[0]);\n  }\n\n  function valFromPercent(scale, percent) {\n    return scale[1] - (1 - percent) * (scale[1] - scale[0]);\n  }\n\n  class Scale {\n    constructor(options = {}) {\n      this._domain = options.domain;\n      this._range = options.range;\n    }\n\n    transformTo(val) {\n      var p = percentFromVal(this._domain, val);\n      return valFromPercent(this._range, p);\n    }\n\n    transformFrom(val) {\n      var p = percentFromVal(this._range, val);\n      return valFromPercent(this._domain, p);\n    }\n  }\n\n  var compute = function(options = {}) {\n    var to = options.to !== undefined ? options.to : 0;\n    var { yDomain, xDomain, xResolution, yResolution, from } = options;\n\n    var xMax = (xDomain[1] - xDomain[0]) / xResolution;\n    var yMax = (yDomain[1] - yDomain[0]) / yResolution;\n\n    var xLinearScale = new Scale({\n      domain: [0, xMax],\n      range: xDomain\n    });\n\n    var yLinearScale = new Scale({\n      domain: [0, yMax],\n      range: yDomain\n    });\n\n    // The space-time coordinates\n    var coordinates = [];\n\n    // Loop through all of the time values\n    // specified to generate each frame\n    for (var t = from; t <= to; t++) {\n      var tValues = [];\n      coordinates.push(tValues);\n\n      // First loop x,\n      for (var x = 0; x <= xMax; x++) {\n        var xValues = [];\n        tValues.push(xValues);\n\n        // then loop y,\n        for (var y = 0; y <= yMax; y++) {\n\n          // and finally call the function, passing\n          // the x, y, and t values for this point\n          xValues.push(options.fn(\n            xLinearScale.transformTo(x),\n            yLinearScale.transformTo(y),\n            t));\n        }\n      }\n    }\n    return coordinates;\n  }\n\n  // Transform 3-d `data` with `mapFn`\n  var mapPoints = function(data, mapFn) {\n    var t, result = [];\n\n    var xlength = data.length;\n    var ylength = data[0].length;\n\n    for(var x = 0; x < xlength; x++) {\n      result.push(t = []);\n      for(var y = 0; y < ylength; y++) {\n        mapFn(t, x, y, xlength, ylength);\n      }\n    }\n\n    return result;\n  }\n\n  var mapDataToViewport = function(options) {\n    var {\n      data, zoom, rotationMatrix,\n      range, zScale,\n      xResolution, xScale,\n      yResolution, yScale,\n      xDomain, yDomain\n    } = options;\n    var orientedPoint;\n\n    var xMax = (xDomain[1] - xDomain[0]) / xResolution;\n    var yMax = (yDomain[1] - yDomain[0]) / yResolution;\n\n    var zLinearScale = new Scale({\n      domain: range,\n      range: [0, zScale]\n    });\n\n    var xLinearScale = new Scale({\n      domain: [0, xMax],\n      range: [-xScale/2, xScale/2]\n    });\n\n    var yLinearScale = new Scale({\n      domain: [0, yMax],\n      range: [-yScale/2, yScale/2]\n    });\n\n    return mapPoints(data, (t, x, y) => {\n\n      // Because of the way the viewport axes are specified, we want our\n      // z value to be along the negative y-axis\n      orientedPoint = [\n        xLinearScale.transformTo(x) * zoom,\n        -zLinearScale.transformTo(data[x][y]) * zoom,\n        yLinearScale.transformTo(y) * zoom\n      ];\n\n      t.push(twoRotations.rotate(orientedPoint, rotationMatrix));\n    });\n  }\n\n  var generateVisData = function(options = {}) {\n    var { originalData, data, width, height, range, zScale } = options;\n\n    // Approximate the midway point of the visualization\n    var offsetX = width / 2;\n\n    // Center the visualization within the available space\n    var offsetY = height - 0.5 * (height - zScale);\n\n    var planes = [];\n\n    // The four values that make up the heights for this piece\n    var z1, z2, z3, z4, zAvg;\n    mapPoints(data, (t, x, y, xlength, ylength) => {\n\n      // Bail when at the second-to-last point, because each plane\n      // requires connecting a point with the point ahead of it\n      if (x === xlength - 1 || y === ylength - 1) { return; }\n\n      // Get the average height for this plane; later used for things like\n      // the color function\n      z1 = originalData[x][y];\n      z2 = originalData[x+1][y];\n      z3 = originalData[x+1][y+1];\n      z4 = originalData[x][y+1];\n      zAvg = 0.25 * (z1 + z2 + z3 + z4);\n\n      var min = range[0];\n      var max = range[1];\n\n      // Ignore points above or below the max or min\n      if (z1 > max || z2 > max || z3 > max || z4 > max) { return; }\n      if (z1 < min || z2 < min || z3 < min || z4 < min) { return; }\n\n      // This is the apparent distance of the point from the screen.\n      // 'Deeper' points are further back\n      var depth = data[x][y][2] + data[x+1][y][2] + data[x+1][y+1][2] + data[x][y+1][2];\n\n      // Create planes by connecting each point with its neighboring points\n      planes.push({\n\n        // Generate pathing data that can be used to create an SVG or a Canvas img\n        path: {\n          moveTo: [(data[x][y][0]+offsetX).toFixed(10), (data[x][y][1]+offsetY).toFixed(10)],\n          pointOne: [(data[x+1][y][0]+offsetX).toFixed(10), (data[x+1][y][1]+offsetY).toFixed(10)],\n          pointTwo: [(data[x+1][y+1][0]+offsetX).toFixed(10), (data[x+1][y+1][1]+offsetY).toFixed(10)],\n          pointThree: [(data[x][y+1][0]+offsetX).toFixed(10), (data[x][y+1][1]+offsetY).toFixed(10)]\n        },\n        depth: depth,\n        avg: zAvg,\n        data: originalData[x][y]\n      });\n    });\n\n    // Sort the planes by depth\n    planes.sort((a, b) => b.depth - a.depth);\n\n    return planes;\n  }\n\n  var surfaceOptions = [\n    'tagName', 'fn', 'el',\n    'width', 'height',\n    'colorFn', 'strokeColorFn',\n    'zoom', 'yaw', 'pitch',\n    'xyDomain', 'xyResolution', 'xyScale',\n    'yDomain', 'yResolution', 'yScale',\n    'xDomain', 'xResolution', 'xScale',\n    'range', 'zScale',\n    'maxPitch'\n  ];\n\n  // Store a handy reference to the SVG namespace\n  const SVG_NS = 'http://www.w3.org/2000/svg';\n\n  class Surface {\n\n    // Create a new Surface\n    constructor(options) {\n\n      // Pick out the valid options from the passed-in options,\n      // then fill in the defaults.\n      _.defaults(this, _.pick(options, surfaceOptions), {\n        tagName: 'canvas',\n        width: 300,\n        height: 300,\n        zoom: 1,\n        yaw: 0.5,\n        pitch: 0.5,\n        maxPitch: Math.PI / 2,\n        colorFn() { return '#333'; },\n        strokeColorFn() { return 'rgba(0,0,0,0.4)'; },\n        fn: Surface.spacetimeOrigin,\n        xyDomain: [-10, 10],\n        xyResolution: 1,\n        xyScale: 300,\n        range: [-10, 10],\n        zScale: 1\n      });\n\n      // Create and set the rotation matrix\n      this._rotationMatrix = [];\n      this._generateRotation();\n\n      // Make sure that the Surface has an associated DOM element,\n      // then determine if it's an SVG Surface or a Canvas Surface\n      this._ensureElement();\n      this._setType();\n    }\n\n    // Generate some coordinates for our fn\n    _computeData(options = {}) {\n      var { from, to, resolution } = options;\n      return compute({\n        fn: this.fn,\n        from, to, resolution,\n        xDomain: this.xDomain || this.xyDomain,\n        xResolution: this.xResolution || this.xyResolution,\n        yDomain: this.yDomain || this.xyDomain,\n        yResolution: this.yResolution || this.xyResolution\n      });\n    }\n\n    // Adjust the orientation of the Surface\n    orient(orientation) {\n      _.extend(this, _.pick(orientation, ['yaw', 'pitch']));\n\n      // Ensure that the pitch is within the limits\n      this.pitch = Math.max(-this.maxPitch, Math.min(this.maxPitch, this.pitch));\n      this._generateRotation();\n      return this;\n    }\n\n    // Render the surface into its element\n    render(options = {}) {\n      var time = options.t || 0;\n\n      // Calculate the data for this moment in time\n      var data = this._computeData({\n        from: time,\n        to: time,\n        resolution: 1\n      })[0];\n\n      // Map that data to the viewport\n      var mappedData = mapDataToViewport({\n        data: data,\n        range: this.range,\n        xScale: this.xScale || this.xyScale,\n        yScale: this.yScale || this.xyScale,\n        xResolution: this.xResolution || this.xyResolution,\n        yResolution: this.yResolution || this.xyResolution,\n        xDomain: this.xDomain || this.xyDomain,\n        yDomain: this.yDomain || this.xyDomain,\n        zScale: this.zScale,\n        zoom: this.zoom,\n        rotationMatrix: this._rotationMatrix\n      });\n\n      // Generate the data necessary to visualize the surface\n      var visData = generateVisData({\n        originalData: data,\n        data: mappedData,\n        height: this.height,\n        width: this.width,\n        range: this.range,\n        zScale: this.zScale,\n        pitch: this.pitch\n      });\n\n      // Render canvas or svg, based on Surface type\n      if (this._type === 'canvas') {\n        this._renderCanvasSurface(visData);\n      } else {\n        this._renderSvgSurface(visData);\n      }\n\n      return this;\n    }\n\n    // Set the rotation matrix\n    _generateRotation() {\n      this._rotationMatrix = twoRotations.generateMatrix(this.yaw, this.pitch);\n    }\n\n    // Make sure that this Surface has an\n    // associated SVG or Canvas element\n    _ensureElement() {\n      if (!this.el) {\n        this.el = this._createElement(_.result(this, 'tagName'));\n      } else {\n        this.el = _.result(this, 'el');\n      }\n\n      if (this.el.nodeName.toLowerCase() === 'canvas') {\n        this.el.width = this.width;\n        this.el.height = this.height;\n      }\n    }\n\n    // Set whether this Surface is an SVG or a Canvas\n    _setType() {\n      this._type = this.el.nodeName.toLowerCase();\n    }\n\n    // Create a new element, given a tagName\n    _createElement(tagName) {\n      if (tagName === 'svg') {\n        return this._createSvgElement('svg');\n      } else if (tagName === 'canvas') {\n        return document.createElement('canvas');\n      } else {\n        throw new Error('The element must be a canvas or svg.');\n      }\n    }\n\n    // Render the Surface as a Canvas\n    _renderCanvasSurface(visData) {\n      var context = this.el.getContext('2d');\n\n      // Clear the canvas\n      this._clearCanvas(context);\n\n      // Loop through the data, drawing each piece of the surface\n      var p;\n      visData.forEach(a => {\n        p = a.path;\n        context.beginPath();\n        context.fillStyle = this.colorFn(a.avg);\n        context.strokeStyle = this.strokeColorFn(a.avg);\n        context.moveTo(Math.round(p.moveTo[0]), Math.round(p.moveTo[1]));\n        context.lineTo(Math.round(p.pointOne[0]), Math.round(p.pointOne[1]));\n        context.lineTo(Math.round(p.pointTwo[0]), Math.round(p.pointTwo[1]));\n        context.lineTo(Math.round(p.pointThree[0]), Math.round(p.pointThree[1]));\n        context.stroke();\n        context.fill();\n      });\n    }\n\n    // Generate an element in the SVG namespace\n    _createSvgElement(tagName) {\n      return document.createElementNS(SVG_NS, tagName);\n    }\n\n    // Set an attribute on an element in the SVG namespace\n    _setSvgAttribute(el, attr, val) {\n      el.setAttributeNS(null, attr, val);\n    }\n\n    // Empty the canvas\n    _clearCanvas(context) {\n      context.clearRect(0, 0, this.el.width, this.el.height);\n    }\n\n    // Empty the svg\n    _clearSvg() {\n      while (this.el.firstChild) {\n        this.el.removeChild(this.el.firstChild);\n      }\n    }\n\n    // Render the Surface as an SVG\n    _renderSvgSurface(visData) {\n      this._clearSvg();\n      var p, path;\n      visData.forEach(a => {\n        p = a.path;\n        path = this._createSvgElement('path');\n        this._setSvgAttribute(path, 'd', this._generateDAttr(a.path));\n        this._setSvgAttribute(path, 'fill', this.colorFn(a.avg));\n        this.el.appendChild(path);\n      });\n    }\n\n    // Generate the `d` attr value for an SVG path\n    _generateDAttr(path) {\n      return `M${path.moveTo[0]}, ${path.moveTo[1]}\n      L${path.pointOne[0]}, ${path.pointOne[1]}\n      L${path.pointTwo[0]}, ${path.pointTwo[1]}\n      L${path.pointThree[0]}, ${path.pointThree[1]}`;\n    }\n  }\n\n  // Return the spacetime origin coordinate: [0, 0, 0, 0]\n  Surface.spacetimeOrigin = function() {\n    return [[[0]]];\n  };\n\n  var surfaces = Surface;\n\n  return surfaces;\n\n}));\n"],"sourceRoot":"/source/"}